%dev.quarkus.http.port=8890
%dev.quarkus.http.host=0.0.0.0
quarkus.http.port=8080

# we don't need SSL here, let's disable it to have a more compact native executable
quarkus.ssl.native=true

quarkus.banner.path=logo.txt

genny.show.values=${GENNY_SHOW_VALUES:false}

genny.keycloak.url=${GENNY_KEYCLOAK_URL:http://localhost:8180}
genny.keycloak.realm=${GENNY_REALM:internmatch}
genny.service.username=${GENNY_SERVICE_USERNAME:service}
genny.service.password=${GENNY_SERVICE_PASSWORD:password}
genny.oidc.client-id=${GENNY_CLIENT_ID:client_id}
genny.oidc.credentials.secret=${GENNY_CLIENT_SECRET}
genny.oidc.auth-server-url=${genny.keycloak.url}/auth/realms/${genny.keycloak.realm}

keycloak/mp-rest/url=${genny.keycloak.url}/auth/admin/realms/${genny.keycloak.realm}
keycloak-token/mp-rest/url=${quarkus.oidc.auth-server-url}
org.eclipse.microprofile.rest.client.propagateHeaders=Authorization


my.hostname=localhost
%prod.kafka.bootstrap.servers=${GENNY_KAFKA_URL:kafka:9092}
%dev.kafka.bootstrap.servers=localhost:9092
%prod.quarkus.kafka-streams.bootstrap-servers=${GENNY_KAFKA_URL:kafka:9092}
%dev.quarkus.kafka-streams.bootstrap-servers=localhost:9092

quarkus.kafka-streams.application-server=localhost:8080
%dev.quarkus.kafka-streams.application-server=localhost:8890

quarkus.devservices.enabled=false

quarkus.kafka-streams.application-id=lowercase-data
quarkus.kafka-streams.topics=attributes,data,test-data

#group.max.session.timeout.ms -> defaults to 30s (genny docker has 60s)
#group.min.session.timeout.ms -> defaults to 6 s (genny docker has 6s)
#group.max.session.timeout.ms in the server.properties > session.timeout.ms in the consumer.properties.
#group.min.session.timeout.ms in the server.properties < session.timeout.ms in the consumer.properties.
#request.timeout.ms > session.timeout.ms + fetch.wait.max.ms
#(session.timeout.ms)/3 > heartbeat.interval.ms
#session.timeout.ms > Worst case processing time of Consumer Records per consumer poll(ms).
# should set enable.auto.offset.store=false 
#max.poll.interval.ms (default to 5m - 300000ms)
kafka-streams.consumer.session.timeout.ms=10000   
kafka-streams.consumer.heartbeat.interval.ms=200

# streams options
kafka-streams.cache.max.bytes.buffering=10240
kafka-streams.commit.interval.ms=1000
kafka-streams.metadata.max.age.ms=500
kafka-streams.auto.offset.reset=earliest
kafka-streams.metrics.recording.level=DEBUG

# Use sub-folder of embedded broker, so it gets cleaned by KafkaResource between re-runs
# This does not work for native tests, manually clean-up /tmp/kafka-streams/temperature-aggregator
%test.kafka-streams.state.dir=target/data/kafka-data/stores

mp.messaging.outgoing.test-data.connector=smallrye-kafka
mp.messaging.outgoing.test-data.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mp.messaging.outgoing.test-data.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.attributes.connector=smallrye-kafka
mp.messaging.outgoing.attributes.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mp.messaging.outgoing.attributes.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.blacklists.connector=smallrye-kafka
mp.messaging.outgoing.blacklists.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.blacklists.topic=blacklists


#mp.messaging.outgoing.blacklist.connector=smallrye-kafka
#mp.messaging.outgoing.blacklist.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
#mp.messaging.outgoing.blacklist.value.serializer=org.apache.kafka.common.serialization.StringSerializer
#
#mp.messaging.outgoing.valid_data.connector=smallrye-kafka
#mp.messaging.outgoing.valid_data.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
#mp.messaging.outgoing.valid_data.value.serializer=org.apache.kafka.common.serialization.StringSerializer

quarkus.container-image.group=gennyproject
quarkus.container-image.name=lauchy

genny.api.url=${GENNY_API_URL:http://internmatch.genny.life:8280}
genny.cache.url=${genny.api.url}/service/cache/read"}
#org.acme.kafka.streams.aggregator.model.ApiService/mp-rest/url=https://internmatch-ptest.gada.io
#org.acme.kafka.streams.aggregator.model.ApiService/mp-rest/uri=https://internmatch-ptest.gada.io
org.acme.kafka.streams.aggregator.model.ApiService/mp-rest/scope=javax.inject.Singleton

#org.acme.kafka.streams.aggregator.model.ApiQwandaService/mp-rest/url=https://internmatch-ptest.gada.io
#org.acme.kafka.streams.aggregator.model.ApiQwandaService/mp-rest/uri=https://internmatch-ptest.gada.io
org.acme.kafka.streams.aggregator.model.ApiQwandaService/mp-rest/scope=javax.inject.Singleton

#org.acme.kafka.streams.aggregator.model.ApiBridgeService/mp-rest/url=https://internmatch-ptest.gada.io
#org.acme.kafka.streams.aggregator.model.ApiBridgeService/mp-rest/uri=https://internmatch-ptest.gada.io
org.acme.kafka.streams.aggregator.model.ApiBridgeService/mp-rest/scope=javax.inject.Singleton

org.acme.kafka.streams.aggregator.model.ApiService/mp-rest/url=${GENNY_API_URL:http://internmatch.genny.life:8280}
org.acme.kafka.streams.aggregator.model.ApiService/mp-rest/uri=${GENNY_API_URL:http://internmatch.genny.life:8280}

org.acme.kafka.streams.aggregator.model.ApiQwandaService/mp-rest/url=${GENNY_API_URL:http://internmatch.genny.life:8280}
org.acme.kafka.streams.aggregator.model.ApiQwandaService/mp-rest/uri=${GENNY_API_URL:http://internmatch.genny.life:8280}

org.acme.kafka.streams.aggregator.model.ApiBridgeService/mp-rest/url=${GENNY_BRIDGE_URL:http://internmatch.genny.life:8280}
org.acme.kafka.streams.aggregator.model.ApiBridgeService/mp-rest/uri=${GENNY_BRIDGE_URL:http://internmatch.genny.life:8280}


quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=INFO
quarkus.log.console.color=true

quarkus.log.category."io.quarkus".level=INFO
quarkus.log.category."org.apache.kafka".level=ERROR

